{
	"info": {
		"_postman_id": "b7b38ced-0f42-48d7-9268-6683d56e7666",
		"name": "API_Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26807129",
		"_collection_link": "https://www.postman.com/navigation-astronaut-64404360/workspace/it-training-bd/collection/26807129-b7b38ced-0f42-48d7-9268-6683d56e7666?action=share&creator=26807129&source=collection_link"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(price)\r",
							"pm.environment.set(\"price\",parseInt(price))\r",
							"\r",
							"\r",
							"var boolean = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(boolean)\r",
							"pm.environment.set(\"boolean\",Boolean(boolean))\r",
							"\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"//console.log(today.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.add(5,'M').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.add(5,'Y').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"pm.environment.set(\"Checkin\",today.add(0,'day').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"Checkout\",today.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"\r",
							"var food = pm.variables.replaceIn(\"{{$randomFood}}\")\r",
							"console.log(food)\r",
							"pm.environment.set(\"food\",food)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsondata = pm.response.json();\r",
							"pm.environment.set(\"id\",jsondata.bookingid);\r",
							"\r",
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code)\r",
							"{\r",
							"   case 200:\r",
							"        pm.test(\"Successfully created is 200\", function ()\r",
							"        {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"   case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\": \"{{firstName}}\",\r\n\t\"lastname\": \"{{lastName}}\",\r\n\t\"totalprice\": {{price}},\r\n\t\"depositpaid\": {{boolean}},\r\n\t\"bookingdates\": {\r\n    \t\"checkin\": \"{{Checkin}}\",\r\n    \t\"checkout\": \"{{Checkout}}\"\r\n\t},\r\n\t\"additionalneeds\": \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"     \r",
							"     case 200:\r",
							"         var getdata = pm.response.json();\r",
							"\r",
							"            pm.test(\"First Name Validation\",function(){\r",
							"            // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"            pm.expect(getdata.firstname).to.eql(pm.environment.get(\"firstName\"));\r",
							"            //pm.expect(getdata.firstname).to.eql(pm.iterationData.get(\"firstName\"));//If want to match with dataset\r",
							"            });\r",
							"\r",
							"            pm.test(\"Last Name Validation\",function(){\r",
							"            // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"            pm.expect(getdata.lastname).to.eql(pm.environment.get(\"lastName\"));\r",
							"            //pm.expect(getdata.lastname).to.eql(pm.iterationData.get(\"lastName\"));//If want to match with dataset\r",
							"            });\r",
							"\r",
							"            pm.test(\"Price Validation\",function(){\r",
							"            // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"            pm.expect(getdata.totalprice).to.eql(pm.environment.get(\"price\"));\r",
							"            });\r",
							"\r",
							"\r",
							"            pm.test(\"Check In\",function(){\r",
							"                //pm.expect(getdata.bookingdates.checkin).to.eql(\"2013-02-23\");\r",
							"                pm.expect(getdata.bookingdates.checkin).to.eql(pm.environment.get(\"Checkin\"));\r",
							"            });\r",
							"\r",
							"            pm.test(\"Check Out\",function(){\r",
							"                //pm.expect(getdata.bookingdates.checkin).to.eql(\"2013-02-23\");\r",
							"                pm.expect(getdata.bookingdates.checkout).to.eql(pm.environment.get(\"Checkout\"));\r",
							"            });\r",
							"\r",
							"\r",
							"            pm.test(\"Deposit Paid\",function(){\r",
							"                pm.expect(getdata.depositpaid).to.deep.eql(pm.environment.get(\"boolean\"));\r",
							"            })\r",
							"\r",
							"\r",
							"            pm.test(\"Successfully fetched from database is 200\", function (){\r",
							"                pm.response.to.have.status(200);\r",
							"            });\r",
							"\r",
							"        break;\r",
							"        \r",
							"    case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404: \r",
							"        pm.test(\"Not Found\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creat Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokendata = pm.response.json();\r",
							"pm.environment.set(\"token\",tokendata.token)\r",
							"\r",
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"     \r",
							"     case 200:\r",
							"        \r",
							"        pm.test(\"Successfully created token is 200\", function (){\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"     break;\r",
							"\r",
							"     case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404: \r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"\r",
							"}\r",
							"//pm.test(\"Token validation\",function(){\r",
							"  // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"  // pm.expect(tokendata.token).to.eql(pm.environment.get(\"token\"));\r",
							"//});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(price)\r",
							"pm.environment.set(\"price\",parseInt(price))\r",
							"\r",
							"\r",
							"var boolean = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(boolean)\r",
							"pm.environment.set(\"boolean\",Boolean(boolean))\r",
							"\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"//console.log(today.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.add(5,'M').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.add(5,'Y').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"pm.environment.set(\"Checkin\",today.add(0,'day').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"Checkout\",today.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"\r",
							"//var food = pm.variables.replaceIn(\"{{$randomFood}}\")\r",
							"//console.log(food)\r",
							"//pm.environment.set(\"food\",food)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokendata = pm.environment.get(\"token\");\r",
							"\r",
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"     \r",
							"     case 200:\r",
							"        pm.test(\"Successfully Updated\", function (){\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"     break;\r",
							"\r",
							"     case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404: \r",
							"        pm.test(\"Not Found\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token = {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\": \"{{firstName}}\",\r\n\t\"lastname\": \"{{lastName}}\",\r\n\t\"totalprice\": {{price}},\r\n\t\"depositpaid\": {{boolean}},\r\n\t\"bookingdates\": {\r\n    \t\"checkin\": \"{{Checkin}}\",\r\n    \t\"checkout\": \"{{Checkout}}\"\r\n\t},\r\n\t\"additionalneeds\": \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Updated Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"     \r",
							"    case 200:\r",
							"\r",
							"    var getdata = pm.response.json();\r",
							"    \r",
							"    pm.test(\"First Name Validation\",function(){\r",
							"    // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"    pm.expect(getdata.firstname).to.eql(pm.environment.get(\"firstName\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"Last Name Validation\",function(){\r",
							"    // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"    pm.expect(getdata.lastname).to.eql(pm.environment.get(\"lastName\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"Price Validation\",function(){\r",
							"    // pm.expect(getdata.firstname).to.eql(\"Rakesh\");\r",
							"    pm.expect(getdata.totalprice).to.eql(pm.environment.get(\"price\"));\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Check In\",function(){\r",
							"        //pm.expect(getdata.bookingdates.checkin).to.eql(\"2013-02-23\");\r",
							"        pm.expect(getdata.bookingdates.checkin).to.eql(pm.environment.get(\"Checkin\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check Out\",function(){\r",
							"        //pm.expect(getdata.bookingdates.checkin).to.eql(\"2013-02-23\");\r",
							"        pm.expect(getdata.bookingdates.checkout).to.eql(pm.environment.get(\"Checkout\"));\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Deposit Paid\",function(){\r",
							"        pm.expect(getdata.depositpaid).to.eql(pm.environment.get(\"boolean\"));\r",
							"    })\r",
							"\r",
							"    \r",
							"    pm.test(\"Successfully fetched updated data is 200\", function (){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404: \r",
							"        pm.test(\"404-Not Found\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code;\r",
							"console.log(code);\r",
							"\r",
							"switch(code){\r",
							"     \r",
							"    case 200:\r",
							"\r",
							"    var getdata = pm.response.json();\r",
							"    \r",
							"    pm.test(\"Successfully Deleted data is 200\", function (){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request\");\r",
							"        break;\r",
							"        \r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404: \r",
							"        pm.test(\"404-Not Found\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token = {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}